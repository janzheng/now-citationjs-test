function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import parseDoiJson from './json';
import { util } from '@citation-js/core';
const apiOptions = {
  checkContentType: true,
  headers: {
    Accept: 'application/vnd.citationstyles.csl+json'
  }
};

const fetchDoiApiAsync = function () {
  var _ref = _asyncToGenerator(function* (url) {
    const result = yield util.fetchFileAsync(url, apiOptions);
    return result === '[]' ? {} : JSON.parse(result);
  });

  return function fetchDoiApiAsync(_x) {
    return _ref.apply(this, arguments);
  };
}();

const parseDoiApiAsync = function () {
  var _ref2 = _asyncToGenerator(function* (data) {
    const doiJsonList = yield Promise.all([].concat(data).map(fetchDoiApiAsync));
    return doiJsonList.map(parseDoiJson);
  });

  return function parseDoiApiAsync(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

const fetchDoiApi = function fetchDoiApi(url) {
  const result = util.fetchFile(url, apiOptions);
  return result === '[]' ? {} : JSON.parse(result);
};

const parseDoiApi = data => [].concat(data).map(fetchDoiApi).map(parseDoiJson);

export { parseDoiApi as parse, parseDoiApiAsync as parseAsync };