"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseEntity = parseEntity;
exports.parseAsync = exports.parseEntitiesAsync = parseEntitiesAsync;
exports.default = exports.parse = exports.parseEntities = parseEntities;

var _core = require("@citation-js/core");

var response = _interopRequireWildcard(require("./response"));

var _prop = require("./prop");

var _props = require("./props");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function resolveProp(prop_, entity, unkown) {
  function resolve([prop, ...parts], {
    claims
  }) {
    if (!parts.length) {
      return claims[prop];
    } else if (claims[prop] && claims[prop].length) {
      return resolve(parts, claims[prop][0].value);
    }
  }

  const parts = prop_.split('.');
  unkown.delete(parts[0]);
  return resolve(parts, entity);
}

function prepareValue(statement, entity, unkown) {
  if (typeof statement !== 'object') {
    const value = resolveProp(statement, entity, unkown);
    return value && value[0].value;
  }

  const values = [].concat(...statement.props.map(prop => resolveProp(prop, entity, unkown)).filter(Boolean));

  if (statement.values === 'all') {
    return values[0] && values;
  } else {
    return values[0] && values[0].value;
  }
}

function parseEntity(entity) {
  const data = {
    id: entity.id,
    _wikiId: entity.id,
    source: 'Wikidata'
  };
  const unkown = new Set(Object.keys(entity.claims));

  for (let prop in _props.props) {
    const input = prepareValue(_props.props[prop], entity, unkown);

    if (input) {
      const output = (0, _prop.parseProp)(prop, input, entity);

      if (output) {
        data[prop] = output;
      }
    }
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = unkown[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      let prop = _step.value;

      if (prop in _props.ignoredProps) {
        continue;
      }

      _core.logger.unmapped('[plugin-wikidata]', 'property', prop);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (!data.title) {
    data.title = (0, _prop.getLabel)(entity);
  }

  if (data['reviewed-title'] || data['reviewed-author']) {
    if (data.type.slice(0, 6) !== 'review') {
      data.type = 'review';
    }

    delete data.keyword;
  }

  if (data.recipient) {
    data.type = 'personal_communication';
  }

  if (data.event) {
    data.type = 'paper-conference';
  }

  return data;
}

function parseEntitiesAsync(_x) {
  return _parseEntitiesAsync.apply(this, arguments);
}

function _parseEntitiesAsync() {
  _parseEntitiesAsync = _asyncToGenerator(function* ({
    entities
  }) {
    return (yield response.parseAsync(entities)).map(parseEntity);
  });
  return _parseEntitiesAsync.apply(this, arguments);
}

function parseEntities({
  entities
}) {
  return response.parse(entities).map(parseEntity);
}