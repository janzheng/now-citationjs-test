"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fillCache = fillCache;
exports.parse = parse;
exports.fillCacheAsync = fillCacheAsync;
exports.parseAsync = parseAsync;

var _wikidataSdk = require("wikidata-sdk");

var _api = require("./api");

var _id = require("./id");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const SIMPLIFY_OPTS = {
  keepQualifiers: true,
  timeConverter: 'simple-day'
};
const FETCH_PLACE = {
  P17: null
};
const FETCH_PUBLISHER = {
  P740: FETCH_PLACE,
  P159: FETCH_PLACE
};
const FETCH_ADDITIONAL = {
  P50: null,
  P57: null,
  P86: null,
  P98: null,
  P110: null,
  P655: null,
  P1817: null,
  P921: {
    P50: null
  },
  P407: null,
  P364: null,
  P123: FETCH_PUBLISHER,
  P629: {
    P50: null,
    P123: FETCH_PUBLISHER
  },
  P437: null,
  P186: null,
  P179: {
    P98: null
  },
  P1433: {
    P4745: {
      P276: FETCH_PLACE
    }
  },
  P361: {
    P50: null
  }
};

function flat(array, part) {
  array.push(...part);
  return array;
}

function collectAdditionalIds(entity, needed) {
  if (!needed) {
    return [];
  }

  entity._needed = Object.assign(entity._needed || {}, needed);
  return Object.keys(entity.claims).filter(prop => prop in needed).map(prop => entity.claims[prop].map(({
    value
  }) => value.id || value)).reduce(flat, []);
}

function completeResponse(entities, old) {
  if (!old) {
    let allIds = [];

    for (let id in entities) {
      const ids = collectAdditionalIds(entities[id], FETCH_ADDITIONAL);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = ids[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          let id = _step.value;

          if (!allIds.includes(id)) {
            allIds.push(id);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    return allIds;
  }

  const ids = [];
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = old[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var id = _step2.value;
      var entity = entities[id];

      if (!entity._needed) {
        continue;
      }

      for (var prop in entity.claims) {
        if (prop in entity._needed) {
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = entity.claims[prop][Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              let claim = _step3.value;

              if (claim.value && claim.value.id) {
                continue;
              }

              claim.value = entities[claim.value];
              ids.push(...collectAdditionalIds(claim.value, entity._needed[prop]));
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                _iterator3.return();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        }
      }

      delete entity._needed;
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return ids;
}

function simplifyEntities(entities) {
  return _wikidataSdk.simplify.entities(entities, SIMPLIFY_OPTS);
}

function initLoopState(entities, cache) {
  return {
    needed: completeResponse(cache),
    incomplete: Object.keys(entities)
  };
}

function filterIdsAndGetUrls(needed, cache) {
  const shouldFetch = needed.filter((id, i) => !(id in cache) && needed.indexOf(id) === i);
  return (0, _id.parse)(shouldFetch);
}

function addItemsToCache(response, cache) {
  const _JSON$parse = JSON.parse(response),
        entities = _JSON$parse.entities;

  Object.assign(cache, simplifyEntities(entities));
}

function updateLoopState(state, cache) {
  return {
    needed: completeResponse(cache, state.incomplete),
    incomplete: state.needed
  };
}

function finalizeItems(entities, cache) {
  return Object.keys(entities).map(id => cache[id]);
}

function fillCache(entities) {
  const cache = simplifyEntities(entities);
  let state = initLoopState(entities, cache);

  while (state.needed.length) {
    const urls = filterIdsAndGetUrls(state.needed, cache);
    urls.map(url => addItemsToCache((0, _api.parse)(url), cache));
    state = updateLoopState(state, cache);
  }

  return cache;
}

function parse(entities) {
  const cache = fillCache(entities);
  return finalizeItems(entities, cache);
}

function fillCacheAsync(_x) {
  return _fillCacheAsync.apply(this, arguments);
}

function _fillCacheAsync() {
  _fillCacheAsync = _asyncToGenerator(function* (entities) {
    const cache = simplifyEntities(entities);
    let state = initLoopState(entities, cache);

    while (state.needed.length) {
      const urls = filterIdsAndGetUrls(state.needed, cache);
      yield Promise.all(urls.map(function () {
        var _ref = _asyncToGenerator(function* (url) {
          return addItemsToCache((yield (0, _api.parseAsync)(url)), cache);
        });

        return function (_x3) {
          return _ref.apply(this, arguments);
        };
      }()));
      state = updateLoopState(state, cache);
    }

    return cache;
  });
  return _fillCacheAsync.apply(this, arguments);
}

function parseAsync(_x2) {
  return _parseAsync.apply(this, arguments);
}

function _parseAsync() {
  _parseAsync = _asyncToGenerator(function* (entities) {
    const cache = yield fillCacheAsync(entities);
    return finalizeItems(entities, cache);
  });
  return _parseAsync.apply(this, arguments);
}