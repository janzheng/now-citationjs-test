import getBibTeXJSON from './json';
import { plugins } from '@citation-js/core';
const syntaxTokens = {
  '|': '{\\textbar}',
  '<': '{\\textless}',
  '>': '{\\textgreater}',
  '~': '{\\textasciitilde}',
  '^': '{\\textasciicircum}',
  '\\': '{\\textbackslash}',
  '{': '\\{\\vphantom{\\}}',
  '}': '\\vphantom{\\{}\\}'
};

function escapeValue(value) {
  return value.replace(/[|<>~^\\{}]/g, match => syntaxTokens[match]);
}

const richTextMappings = {
  'i': '\\textit{',
  'b': '\\textbf{',
  'sc': '\\textsc{',
  'sup': '\\textsuperscript{',
  'sub': '\\textsubscript{',
  'span style="font-variant:small-caps;"': '\\textsc{',
  'span class="nocase"': '{'
};

function serializeRichTextValue(value) {
  let tokens = value.split(/<(\/.*?|i|b|sc|sup|sub|span.*?)>/g);
  tokens = tokens.map((token, index) => {
    if (index % 2 === 0) {
      return escapeValue(token);
    } else if (token in richTextMappings) {
      return richTextMappings[token];
    } else {
      return '}';
    }
  });
  return tokens.join('');
}

const richTextFields = ['title'];

function serializeValue(prop, value, dict) {
  if (richTextFields.includes(prop)) {
    value = serializeRichTextValue(value);
  } else {
    value = escapeValue(value);
  }

  return dict.listItem.join(`${prop} = {${value}},`);
}

function serializeEntry(entry, dict, opts) {
  let _getBibTeXJSON = getBibTeXJSON(entry, opts),
      type = _getBibTeXJSON.type,
      label = _getBibTeXJSON.label,
      properties = _getBibTeXJSON.properties;

  properties = Object.keys(properties).map(prop => serializeValue(prop, properties[prop], dict)).join('');
  return dict.entry.join(`@${type}{${label},${dict.list.join(properties)}}`);
}

const getBibtex = function getBibtex(src, dict, opts) {
  let entries = src.map(entry => serializeEntry(entry, dict, opts)).join('');
  return dict.bibliographyContainer.join(entries);
};

const getBibTeXWrapper = function getBibTeXWrapper(src, html) {
  const dict = plugins.dict.get(html ? 'html' : 'text');
  return getBibtex(src, dict);
};

export { getBibtex };
export default getBibTeXWrapper;