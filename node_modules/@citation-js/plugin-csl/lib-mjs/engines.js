function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import CSL from 'citeproc';
import { templates } from './styles';
import { locales } from './locales';
const proxied = Symbol.for('proxied');

const getWrapperProxy = function getWrapperProxy(original) {
  const proxy = function proxy(state, entry) {
    if (state.sys.wrapBibliographyEntry) {
      let _state$sys$wrapBiblio = state.sys.wrapBibliographyEntry(this.system_id),
          _state$sys$wrapBiblio2 = _slicedToArray(_state$sys$wrapBiblio, 2),
          prefix = _state$sys$wrapBiblio2[0],
          postfix = _state$sys$wrapBiblio2[1];

      entry = [prefix, entry, postfix].join('');
    }

    return original.call(this, state, entry);
  };

  proxy[proxied] = true;
  return proxy;
};

for (let format in CSL.Output.Formats) {
  let original = CSL.Output.Formats[format]['@bibliography/entry'];

  if (!original || original[proxied]) {
    continue;
  }

  CSL.Output.Formats[format]['@bibliography/entry'] = getWrapperProxy(original);
}

const engines = {};

const fetchEngine = function fetchEngine(style, lang, template, retrieveItem, retrieveLocale) {
  const engineHash = `${style}|${lang}`;
  let engine;

  if (engines.hasOwnProperty(engineHash)) {
    engine = engines[engineHash];
    engine.sys.retrieveItem = retrieveItem;
  } else {
    engine = engines[engineHash] = new CSL.Engine({
      retrieveLocale,
      retrieveItem
    }, template, lang, true);
  }

  return engine;
};

const prepareEngine = function prepareEngine(data, templateName, language, format) {
  const items = data.reduce((store, entry) => {
    store[entry.id] = entry;
    return store;
  }, {});
  const template = templates.get(templates.has(templateName) ? templateName : 'apa');
  language = locales.has(language) ? language : 'en-US';
  const engine = fetchEngine(templateName, language, template, key => items[key], locales.get.bind(locales));
  engine.setOutputFormat(format);
  return engine;
};

export default prepareEngine;
export { fetchEngine };