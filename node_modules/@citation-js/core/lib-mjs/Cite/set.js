function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import { chain as parseInput, chainAsync as parseInputAsync } from '../plugins/input/';
import fetchId from '../util/fetchId';

const add = function add(data, options = {}, log = false) {
  if (options === true || log === true) {
    this.save();
  }

  this.data.push(...parseInput(data, options));
  this.data.filter(entry => !entry.hasOwnProperty('id')).forEach(entry => {
    entry.id = fetchId(this.getIds(), 'temp_id_');
  });
  return this;
};

const addAsync = function () {
  var _ref = _asyncToGenerator(function* (data, options = {}, log = false) {
    if (options === true || log === true) {
      this.save();
    }

    this.data.push(...(yield parseInputAsync(data, options)));
    this.data.filter(entry => !entry.hasOwnProperty('id')).forEach(entry => {
      entry.id = fetchId(this.getIds(), 'temp_id_');
    });
    return this;
  });

  return function addAsync(_x) {
    return _ref.apply(this, arguments);
  };
}();

const set = function set(data, options = {}, log = false) {
  if (options === true || log === true) {
    this.save();
  }

  this.data = [];
  return typeof options !== 'boolean' ? this.add(data, options) : this.add(data);
};

const setAsync = function () {
  var _ref2 = _asyncToGenerator(function* (data, options = {}, log = false) {
    if (options === true || log === true) {
      this.save();
    }

    this.data = [];
    return typeof options !== 'boolean' ? this.addAsync(data, options) : this.addAsync(data);
  });

  return function setAsync(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

const reset = function reset(log) {
  if (log) {
    this.save();
  }

  this.data = [];
  this._options = {};
  return this;
};

export { add, addAsync, set, setAsync, reset };