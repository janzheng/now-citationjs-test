#!/usr/bin/env node
"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const fs = require('fs');

const readFile = promisify(fs.readFile);
const writeFile = promisify(fs.writeFile);

function promisify(fn) {
  return function (...args) {
    return new Promise((resolve, reject) => {
      fn.call(this, ...args, function (err, data) {
        if (err) {
          reject(err);
        } else {
          resolve(data);
        }
      });
    });
  };
}

const _require = require('@citation-js/core'),
      Cite = _require.Cite,
      plugins = _require.plugins,
      logger = _require.logger;

require('@citation-js/plugin-bibjson');

require('@citation-js/plugin-bibtex');

require('@citation-js/plugin-csl');

require('@citation-js/plugin-doi');

require('@citation-js/plugin-ris');

require('@citation-js/plugin-wikidata');

const program = require('commander');

program.version(require('../package.json').version).usage('[options]').option('-i, --input <path>', 'Input file. If all input options are omitted, it uses stdin').option('-t, --text <string>', 'Input text. If all input options are omitted, it uses stdin').option('-u, --url <string>', 'Deprecated in favor of -t, --text. If all input options are omitted, it uses stdin').option('-o, --output <path>', 'Output file (omit file extension). If this option is omitted, the output is written to stdout').option('--pipe', 'Pipe and transform from stdin to stdout').option('-R, --output-non-real', 'Output as a text file', false).option('-f, --output-type <option>', 'Output structure type: string, html, json', 'json').option('-s, --output-style <option>', 'Output scheme. A combination of --output-format json and --output-style citation-* is considered invalid. ' + 'Options: csl (Citation Style Lanugage JSON), bibtex, citation-* (where * is any formatting style)', 'csl').option('-l, --output-language <option>', 'Output language. [RFC 5646](https://tools.ietf.org/html/rfc5646) codes', 'en-US').option('--log-level <level>', 'Log level: silent, error, warn, info, debug, http', 'warn').option('--plugins <names>', 'Plugin names (@citation-js/plugin-NAME); bibjson, bibtex, csl, doi, ris & wikidata are preloaded', names => names.split(','), []).option('--plugin-config <config>', '@plugin.property.path=value;...', splitOptions, []).option('--formatter-options <config>', 'property.path=value;...', splitOptions, []).option('--no-input-generate-graph').option('--input-force-type <type>').option('--input-max-chain-length <number>').option('--no-input-strict').option('--input-target <type>').parse(process.argv);

function splitOptions(options) {
  return options.split(';').map(pair => {
    const _pair$split = pair.split('='),
          _pair$split2 = _slicedToArray(_pair$split, 2),
          key = _pair$split2[0],
          value = _pair$split2[1];

    return [key.split('.'), value];
  });
}

main(program).catch(console.error);
module.exports = main;

function main(_x) {
  return _main.apply(this, arguments);
}

function _main() {
  _main = _asyncToGenerator(function* (options) {
    process.stdin.setEncoding('utf8');
    logger.level = options.logLevel;
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = options.plugins[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        let plugin = _step2.value;

        try {
          require(`@citation-js/plugin-${plugin}`);
        } catch (e) {
          logger.error(`Could not load plugin "@citation-js/plugin-${plugin}"`);
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    setConfig(options.pluginConfig);
    options.formatterOptions = assignOptions({}, options.formatterOptions);

    if (options.pipe) {
      yield pipe(process.stdin, process.stdout, options);
    } else {
      const input = yield getInput(options);
      yield writeOutput((yield processInput(input, options)), options);
    }
  });
  return _main.apply(this, arguments);
}

function setConfig(newConfigs) {
  newConfigs = newConfigs.reduce((plugins, newConfig) => {
    const plugin = newConfig[0].shift();

    if (!plugins[plugin]) {
      plugins[plugin] = [];
    }

    plugins[plugin].push(newConfig);
    return plugins;
  }, {});

  for (let plugin in newConfigs) {
    const oldConfig = plugins.config.get(plugin);

    if (oldConfig) {
      assignOptions(oldConfig, newConfigs[plugin]);
    }
  }
}

function assignOptions(object, options) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      let _step$value = _slicedToArray(_step.value, 2),
          path = _step$value[0],
          value = _step$value[1];

      const key = path.pop();
      const assigner = path.reduce((object, key) => {
        return object[key] || (object[key] = {});
      }, object);
      assigner[key] = parseValue(value);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return object;
}

function parseValue(value) {
  if (!isNaN(+value)) {
    return +value;
  } else if (/^\[/.test(value)) {
    return value.replace(/^\[|\]$/g, '').split(',').map(parseValue);
  } else {
    return {
      false: false,
      true: true,
      undefined: undefined,
      null: null,
      NaN: NaN
    }[value] || value;
  }
}

module.exports.pipe = pipe;

function pipe(stdin, stdout, options) {
  return new Promise((resolve, reject) => {
    const useless = ['input', 'text', 'url', 'output'].filter(option => options[option]);

    if (useless.length) {
      reject(new Error(`Cannot use options "${useless.map(option => `--${option}`).join(', ')}" together with --pipe`));
    }

    stdin.on('readable', _asyncToGenerator(function* () {
      const input = stdin.read();

      if (input) {
        const output = yield processInput(input, options);
        stdout.write(output + '\n');
      }
    }));
    stdin.on('end', () => {
      resolve();
    });
    stdin.on('error', err => {
      reject(err);
    });
  });
}

function getInput(_x2) {
  return _getInput.apply(this, arguments);
}

function _getInput() {
  _getInput = _asyncToGenerator(function* (options) {
    if (options.input) {
      return readFile(options.input, 'utf8');
    } else if (options.text || options.url) {
      return options.text || options.url;
    } else {
      return new Promise(function (resolve, reject) {
        let input = '';
        process.stdin.on('readable', () => {
          input += process.stdin.read() || '';
        });
        process.stdin.on('end', () => {
          resolve(input);
        });
        process.stdin.on('error', err => {
          reject(err);
        });
      });
    }
  });
  return _getInput.apply(this, arguments);
}

function processInput(_x3, _x4) {
  return _processInput.apply(this, arguments);
}

function _processInput() {
  _processInput = _asyncToGenerator(function* (input, options) {
    const data = yield Cite.async(input, getPrefixedOptions(options, 'input'));
    let output = data.get({
      format: 'string',
      type: options.outputType,
      style: options.outputStyle,
      lang: options.outputLanguage,
      _newOptions: options.formatterOptions
    });

    if (!options.outputNonReal && options.outputType === 'html') {
      output = '<!DOCTYPE html><html><head><meta charset="UTF-8"></head><body>' + output + '</body></html>';
    }

    return output;
  });
  return _processInput.apply(this, arguments);
}

function getPrefixedOptions(options, prefix) {
  const output = {};

  for (let prop in options) {
    if (prop.slice(0, prefix.length) === prefix && prop.length !== prefix) {
      let newProp = prop.slice(prefix.length);
      newProp = newProp[0].toLowerCase() + newProp.slice(1);
      output[newProp] = options[prop];
    }
  }

  return output;
}

function writeOutput(output, options) {
  if (!options.output) {
    process.stdout.write(output + '\n');
  } else {
    const extension = getExtension(options);
    writeFile(options.output + '.' + extension, output);
  }
}

function getExtension(options) {
  const lookup = {
    string: 'txt',
    html: 'html',
    json: 'json'
  };

  if (options.outputStyle === 'bibtex' && options.outputType === 'string') {
    return 'bib';
  } else if (options.outputNonReal) {
    return 'txt';
  } else {
    return lookup[options.outputType];
  }
}